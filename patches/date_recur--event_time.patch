diff --git a/src/Plugin/views/row/DateRecurCalendar.php b/src/Plugin/views/row/DateRecurCalendar.php
index 13a6c80bd..977034b0d 100644
--- a/src/Plugin/views/row/DateRecurCalendar.php
+++ b/src/Plugin/views/row/DateRecurCalendar.php
@@ -5,6 +5,7 @@
 use Drupal\calendar\CalendarHelper;
 use Drupal\calendar\CalendarViewsTrait;
 use Drupal\Core\Datetime\DrupalDateTime;
+use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Field\EntityReferenceFieldItemListInterface;
 use Drupal\date_recur\Plugin\Field\FieldType\DateRecurItem;
@@ -340,6 +341,8 @@ public function render($row) {
     $dateMax = $dateInfo->getMaxDate();
     // Timezone.
     $tz = new \DateTimeZone(timezone_name_get($dateInfo->getTimezone()));
+    $storage_timezone = new \DateTimeZone(DateTimeItemInterface::STORAGE_TIMEZONE);
+    $display_timezone = $dateInfo->getTimezone();
     // There could be more than one date field in a view so iterate through all
     // of them to find the right values for this view result.
     foreach ($this->dateFields as $field_name => $info) {
@@ -380,39 +383,23 @@ public function render($row) {
           if ($occurrenceHandler->isRecurring()) {
             // Try to create DateTime object from the date comes from the query.
             if (property_exists($row, $query_field)) {
-              $dateMin = \DateTime::createFromFormat($storage_format, $row->{$query_field});
+              $dateMin = \DateTime::createFromFormat($storage_format, $row->{$query_field}, $storage_timezone);
               $dateMax = NULL;
             }
 
-            // FIXME - Force timestamp conversion to UTC.
-            $ts = $dateMin->getTimestamp() + $dateMin->getOffset();
-            $dateMin->setTimestamp($ts);
-
             // Get a list of occurrences for display.
             $occurrences = $occurrenceHandler->getOccurrencesForDisplay($dateMin, $dateMax, 1);
             if (!empty($occurrences)) {
               foreach ($occurrences as $_delta => $occurrence) {
-                /** @var \DateTime $start */
+                /** @var \DrupalDateTime $start */
                 $start = $occurrence['value'];
-                /** @var \DateTime $end */
+                $item_start_date = $start;
+
+                /** @var \DrupalDateTime $end */
                 $end = $occurrence['end_value'];
-                $item_start_date = new \DateTime();
-                $item_start_date->setTimestamp($start->getTimestamp());
-                $item_start_date->setTimezone($tz);
-                // FIXME - Better method to convert timestamp (back) to UTC.
-                // DateRecur values already have offset, so we need to convert
-                // value back to UTC.
-                $ts = $item_start_date->getTimestamp() - $item_start_date->getOffset();
-                $item_start_date->setTimestamp($ts);
-                $item_end_date = new \DateTime();
-                $item_end_date->setTimestamp($end->getTimestamp());
-                $item_end_date->setTimezone($tz);
-                // FIXME - Better method to convert timestamp (back) to UTC.
-                // DateRecur values already have offset, so we need to convert
-                // value back to UTC.
-                $ts = $item_end_date->getTimestamp() - $item_end_date->getOffset();
-                $item_end_date->setTimestamp($ts);
-                // Finally, create event objects, and merge them into the row.
+                $item_end_date = $end;
+
+                // Create event objects, and merge them into the row.
                 $items = $this->getEventItems($row->_entity, $item_start_date, $item_end_date, $tz, $granularity);
                 if (!empty($items)) {
                   $rows = array_merge($rows, $items);
@@ -444,8 +423,8 @@ public function render($row) {
         if (empty($date_end)) {
           $date_end = $date;
         }
-        $item_start_date = \DateTime::createFromFormat($storage_format, $date, $tz);
-        $item_end_date = \DateTime::createFromFormat($storage_format, $date_end, $tz);
+        $item_start_date = \DateTime::createFromFormat($storage_format, $date, $storage_timezone)->setTimezone($display_timezone);
+        $item_end_date = \DateTime::createFromFormat($storage_format, $date_end, $storage_timezone)->setTimezone($display_timezone);
       }
       elseif ($field = $entity->get($field_name)) {
         $item = $field->getValue();
@@ -467,6 +446,7 @@ public function render($row) {
         $rows = array_merge($rows, $items);
       }
     }
+
     return $rows;
   }
   public function getEventItems($entity, $item_start_date, $item_end_date, $tz, $granularity) {
